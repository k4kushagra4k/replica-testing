{"ast":null,"code":"var _jsxFileName = \"D:\\\\Digital-replica\\\\frontend\\\\src\\\\Components\\\\Chatbot\\\\Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./Chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const scriptRef = useRef(null);\n  const CHATBOT_ORIGIN = \"https://chatbot-embed.viasocket.com\";\n  const EMBED_TOKEN = \"eyJvcmdfaWQiOiIxMjA2OSIsImNoYXRib3RfaWQiOiI2Nzc2MjQ1MzVlMTBlMTY2MzdlMzVlY2EiLCJ1c2VyX2lkIjoiMDNmYmIzZjNhMjQ5ZmZhMmE2NGE1Yjk1NDliODFlYTciLCJ2YXJpYWJsZXMiOnsia2V5IjoiV0V3aHFabDAwNUVyTWsifSwiYWxnIjoiSFMyNTYifQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.dKRj8kLHyn8dBPWBjCsBRRo3X_smh9CBaExX_Blu75E\"; // Replace with your embed token\n\n  // Utility function to add a message to chat history\n  const addMessage = (sender, message) => {\n    setChatHistory(prev => [...prev, {\n      sender,\n      message\n    }]);\n  };\n\n  // Function to send data to the chatbot\n  const sendDataToChatbot = async () => {\n    if (!userInput.trim()) return; // Avoid sending empty messages\n    addMessage(\"user\", userInput);\n    try {\n      const response = await fetch(`${CHATBOT_ORIGIN}/api/chat`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${EMBED_TOKEN}` // Include your token if required\n        },\n        body: JSON.stringify({\n          message: userInput,\n          bridgeName: \"Assistant\",\n          // Replace with your bridge name\n          threadId: \"567567\" // Replace with a unique thread ID\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Chatbot API returned status ${response.status}`);\n      }\n      const data = await response.json();\n      addMessage(\"chatbot\", data.reply || \"No response from chatbot\");\n    } catch (error) {\n      console.error(\"Error communicating with chatbot API:\", error);\n      addMessage(\"chatbot\", \"Error: Unable to communicate with chatbot.\");\n    }\n    setUserInput(\"\"); // Clear the input field\n  };\n\n  // Handle messages received from the chatbot\n  const handleMessage = event => {\n    if (event.origin !== CHATBOT_ORIGIN) {\n      console.warn(\"Message received from an unexpected origin:\", event.origin);\n      return;\n    }\n    const receivedData = event.data;\n    const chatbotMessage = typeof receivedData === \"string\" ? receivedData : JSON.stringify(receivedData); // Convert object to string if necessary\n\n    addMessage(\"chatbot\", chatbotMessage);\n  };\n\n  // Dynamically load the chatbot script\n  useEffect(() => {\n    if (!scriptRef.current) {\n      const script = document.createElement(\"script\");\n      script.id = \"chatbot-main-script\";\n      script.src = `${CHATBOT_ORIGIN}/chatbot-prod.js`;\n      script.async = true;\n      script.onload = () => {\n        script.setAttribute(\"embedToken\", EMBED_TOKEN);\n        console.log(\"Chatbot script loaded successfully.\");\n      };\n      script.onerror = error => {\n        console.error(\"Error loading chatbot script:\", error);\n      };\n      document.body.appendChild(script);\n      scriptRef.current = script;\n    }\n    window.addEventListener(\"message\", handleMessage);\n    return () => {\n      if (scriptRef.current) {\n        document.body.removeChild(scriptRef.current);\n        scriptRef.current = null;\n      }\n      window.removeEventListener(\"message\", handleMessage);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    id: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ReplicaVerse\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-interface\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-history\",\n        children: chatHistory.map((chat, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${chat.sender === \"user\" ? \"user-message\" : \"chatbot-message\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [chat.sender === \"user\" ? \"You\" : \"Chatbot\", \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), \" \", chat.message]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendDataToChatbot,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"4BRQnNdvZbt3CRiqpi33lI3uCOY=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","chatHistory","setChatHistory","userInput","setUserInput","scriptRef","CHATBOT_ORIGIN","EMBED_TOKEN","addMessage","sender","message","prev","sendDataToChatbot","trim","response","fetch","method","headers","Authorization","body","JSON","stringify","bridgeName","threadId","ok","Error","status","data","json","reply","error","console","handleMessage","event","origin","warn","receivedData","chatbotMessage","current","script","document","createElement","id","src","async","onload","setAttribute","log","onerror","appendChild","window","addEventListener","removeChild","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","chat","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/Digital-replica/frontend/src/Components/Chatbot/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./Chatbot.css\";\r\n\r\nconst Chatbot = () => {\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const scriptRef = useRef(null);\r\n\r\n  const CHATBOT_ORIGIN = \"https://chatbot-embed.viasocket.com\";\r\n  const EMBED_TOKEN =\r\n    \"eyJvcmdfaWQiOiIxMjA2OSIsImNoYXRib3RfaWQiOiI2Nzc2MjQ1MzVlMTBlMTY2MzdlMzVlY2EiLCJ1c2VyX2lkIjoiMDNmYmIzZjNhMjQ5ZmZhMmE2NGE1Yjk1NDliODFlYTciLCJ2YXJpYWJsZXMiOnsia2V5IjoiV0V3aHFabDAwNUVyTWsifSwiYWxnIjoiSFMyNTYifQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.dKRj8kLHyn8dBPWBjCsBRRo3X_smh9CBaExX_Blu75E\"; // Replace with your embed token\r\n\r\n  // Utility function to add a message to chat history\r\n  const addMessage = (sender, message) => {\r\n    setChatHistory((prev) => [...prev, { sender, message }]);\r\n  };\r\n\r\n  // Function to send data to the chatbot\r\n  const sendDataToChatbot = async () => {\r\n    if (!userInput.trim()) return; // Avoid sending empty messages\r\n    addMessage(\"user\", userInput);\r\n\r\n    try {\r\n      const response = await fetch(`${CHATBOT_ORIGIN}/api/chat`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${EMBED_TOKEN}`, // Include your token if required\r\n        },\r\n        body: JSON.stringify({\r\n          message: userInput,\r\n          bridgeName: \"Assistant\", // Replace with your bridge name\r\n          threadId: \"567567\", // Replace with a unique thread ID\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Chatbot API returned status ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      addMessage(\"chatbot\", data.reply || \"No response from chatbot\");\r\n    } catch (error) {\r\n      console.error(\"Error communicating with chatbot API:\", error);\r\n      addMessage(\"chatbot\", \"Error: Unable to communicate with chatbot.\");\r\n    }\r\n\r\n    setUserInput(\"\"); // Clear the input field\r\n  };\r\n\r\n  // Handle messages received from the chatbot\r\n  const handleMessage = (event) => {\r\n    if (event.origin !== CHATBOT_ORIGIN) {\r\n      console.warn(\"Message received from an unexpected origin:\", event.origin);\r\n      return;\r\n    }\r\n\r\n    const receivedData = event.data;\r\n    const chatbotMessage =\r\n      typeof receivedData === \"string\"\r\n        ? receivedData\r\n        : JSON.stringify(receivedData); // Convert object to string if necessary\r\n\r\n    addMessage(\"chatbot\", chatbotMessage);\r\n  };\r\n\r\n  // Dynamically load the chatbot script\r\n  useEffect(() => {\r\n    if (!scriptRef.current) {\r\n      const script = document.createElement(\"script\");\r\n      script.id = \"chatbot-main-script\";\r\n      script.src = `${CHATBOT_ORIGIN}/chatbot-prod.js`;\r\n      script.async = true;\r\n      script.onload = () => {\r\n        script.setAttribute(\"embedToken\", EMBED_TOKEN);\r\n        console.log(\"Chatbot script loaded successfully.\");\r\n      };\r\n      script.onerror = (error) => {\r\n        console.error(\"Error loading chatbot script:\", error);\r\n      };\r\n      document.body.appendChild(script);\r\n      scriptRef.current = script;\r\n    }\r\n\r\n    window.addEventListener(\"message\", handleMessage);\r\n\r\n    return () => {\r\n      if (scriptRef.current) {\r\n        document.body.removeChild(scriptRef.current);\r\n        scriptRef.current = null;\r\n      }\r\n      window.removeEventListener(\"message\", handleMessage);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"chatbot-container\" id=\"chatbot-container\">\r\n      <h1>ReplicaVerse</h1>\r\n      <div className=\"chat-interface\">\r\n        <div className=\"chat-history\">\r\n          {chatHistory.map((chat, index) => (\r\n            <div\r\n              key={index}\r\n              className={`chat-message ${\r\n                chat.sender === \"user\" ? \"user-message\" : \"chatbot-message\"\r\n              }`}\r\n            >\r\n              <strong>{chat.sender === \"user\" ? \"You\" : \"Chatbot\"}:</strong>{\" \"}\r\n              {chat.message}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"chat-input\">\r\n          <input\r\n            type=\"text\"\r\n            value={userInput}\r\n            onChange={(e) => setUserInput(e.target.value)}\r\n            placeholder=\"Type your message...\"\r\n          />\r\n          <button onClick={sendDataToChatbot}>Send</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}